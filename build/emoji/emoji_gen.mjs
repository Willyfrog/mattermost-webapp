// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
/* eslint-disable no-console */

import * as Fs from 'fs';

import jsonData from 'emoji-datasource/emoji.json';

const EMOJI_SIZE = 64;

// we'll load it as a two dimensional array so we can generate a Map out of it
const emojiIndicesByAlias = [];
const emojiIndicesByUnicode = [];
const emojiIndicesByCategory = new Map();
const categoryNamesSet = new Set();
const emojiImagesByAlias = [];
const emojiFilePositions = new Map();

function filename(emoji) {
    return emoji.image.split('.')[0];
}

jsonData.forEach((emoji, index) => {
    emojiIndicesByUnicode.push([emoji.unified, index]);
    const catIndex = emojiIndicesByCategory.get(emoji.category) || [];
    catIndex.push(index);
    emojiIndicesByCategory.set(emoji.category, catIndex);
    categoryNamesSet.add(emoji.category);
    emojiIndicesByAlias.push(...emoji.short_names.map((alias) => [alias, index]));
    const file = filename(emoji);
    emojiImagesByAlias.push(...emoji.short_names.map((alias) => `"${alias}": ${file}`));
    emojiFilePositions.set(file, `-${emoji.sheet_x * EMOJI_SIZE}px -${emoji.sheet_y * EMOJI_SIZE}px;`);
});

const categoryNames = [...categoryNamesSet];

// generate emoji.jsx out of the emoji.json parsing we did
const emojiJSX = `// This file is automatically generated via \`make emojis\`. Do not modify it manually.

/* eslint-disable */

import emojis from 'emoji-datasource/emoji.json';

export const Emojis = emojis;

export const EmojiIndicesByAlias = new Map(${JSON.stringify(emojiIndicesByAlias)});

export const EmojiIndicesByUnicode = new Map(${JSON.stringify(emojiIndicesByUnicode)});

export const CategoryNames = ${JSON.stringify(categoryNames)};

export const EmojiIndicesByCategory = new Map(${JSON.stringify(Array.from(emojiIndicesByCategory))});`;

// write emoji.jsx
Fs.writeFile('utils/emoji.jsx', emojiJSX, 'utf8', (err) => {
    const result = err ? `with errors: ${err}` : 'successfuly';
    console.log(`emoji.jsx generated ${result}.`);
});

// golang emoji data

const emojiGo = `// Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

// This file is automatically generated via \`make emojis\`. Do not modify it manually.

package model

var SystemEmojis = map[string]string{${emojiImagesByAlias.join(', ')}}`;

Fs.writeFile('emoji_data.go', emojiGo, 'utf8', (err) => {
    const result = err ? `with errors: ${err}` : 'successfuly';
    console.log(`emoji_data.go generated ${result}.`);
});

// ToDo
// If SERVER_DIR is defined we can update the file emoji_data.go in
// the server directory
// if ENV.key?('SERVER_DIR')
//   server_dir = File.join(ENV['SERVER_DIR'], 'model')
//   FileUtils.mv(File.join(project_root, 'emoji_data.go'), server_dir)
// end

// sprite css file

const cssCats = categoryNames.map((cat) => `.emoji-category-${cat} { background-image: url('/emoji-datasource/sheets-clean/sheet_apple_${EMOJI_SIZE}_clean.png'); }`);
const cssEmojis = [];
for (const key of emojiFilePositions.keys()) {
    cssEmojis.push(`.emoji-${key} { background-position: ${emojiFilePositions.get(key)} }`);
}

const cssRules = `
@charset "UTF-8";
.emojisprite-preview {
    # Using zoom for now as it results in less blurry emojis on Chrome - MM-34178
    zoom: 0.55;
    -moz-transform: scale(0.55);
    background-repeat: no-repeat;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
    padding: 0 10px 0 0;
}
.emojisprite {
    zoom: 0.35;
    -moz-transform: scale(0.35);
    background-repeat: no-repeat;
    border-radius: 18px;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
}
.emojisprite-loading {
    background-image: none !important;
    zoom: 0.35;
    -moz-transform: scale(0.35);
    background-repeat: no-repeat;
    border-radius: 18px;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
}

${cssCats.join('\n')};
${cssEmojis.join('\n')};
`;

// write emoji.jsx
Fs.writeFile('sass/components/_emojisprite.scss', cssRules, 'utf8', (err) => {
    const result = err ? `with errors: ${err}` : 'successfuly';
    console.log(`emoji.jsx generated ${result}.`);
});
/* eslint-enable no-console */
