// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

/*
* This script will auto generate all the needed files for both the webapp and server to use emojis from emoji-datasource
* in order to locate the server path, you'll need to define the $SERVER_PATH environment variable,
* otherwise the file will be placed in the root of the project.
* if you don't want to set it but for this run you can run it like:
* $ $SERVER_ENV=<path_to_server> npm run make-emojis
 */

/* eslint-disable no-console */
/* eslint-disable no-process-env */

// eslint-disable-next-line import/no-unresolved
import * as Fs from 'fs/promises';

import path from 'path';

import jsonData from 'emoji-datasource/emoji.json';

const EMOJI_SIZE = 64;

// we'll load it as a two dimensional array so we can generate a Map out of it
const emojiIndicesByAlias = [];
const emojiIndicesByUnicode = [];
const emojiIndicesByCategory = new Map();
const categoryNamesSet = new Set();
const emojiImagesByAlias = [];
const emojiFilePositions = new Map();

const control = new AbortController();
const writeOptions = {
    encoding: 'utf8',
    signal: control.signal,
};
const endResults = [];

function filename(emoji) {
    return emoji.image.split('.')[0];
}

function writeFile(fileName, filePath, data) {
    const promise = Fs.writeFile(filePath, data, writeOptions);

    promise.then(() => {
        console.log(`${fileName} generated successfuly.`);
    });
    return promise;
}

jsonData.forEach((emoji, index) => {
    emojiIndicesByUnicode.push([emoji.unified, index]);
    const safeCat = emoji.category.toLowerCase().replace(' & ', '-');
    const catIndex = emojiIndicesByCategory.get(safeCat) || [];
    catIndex.push(index);
    emojiIndicesByCategory.set(safeCat, catIndex);
    categoryNamesSet.add(safeCat);
    emojiIndicesByAlias.push(...emoji.short_names.map((alias) => [alias, index]));
    const file = filename(emoji);
    emojiImagesByAlias.push(...emoji.short_names.map((alias) => `"${alias}": "${file}"`));
    emojiFilePositions.set(file, `-${emoji.sheet_x * EMOJI_SIZE}px -${emoji.sheet_y * EMOJI_SIZE}px;`);
});

const categoryNames = [...categoryNamesSet];
const categoryTranslations = categoryNames.map((c) => `['${c}', t('emoji_picker.${c}')]`);

// generate emoji.jsx out of the emoji.json parsing we did
const emojiJSX = `// This file is automatically generated via \`make emojis\`. Do not modify it manually.

/* eslint-disable */

import {t} from 'utils/i18n';

import emojis from 'emoji-datasource/emoji.json';

export const Emojis = emojis;

export const EmojiIndicesByAlias = new Map(${JSON.stringify(emojiIndicesByAlias)});

export const EmojiIndicesByUnicode = new Map(${JSON.stringify(emojiIndicesByUnicode)});

export const CategoryNames = ${JSON.stringify(categoryNames)};

export const CategoryTranslations = new Map(${categoryTranslations})

export const EmojiIndicesByCategory = new Map(${JSON.stringify(Array.from(emojiIndicesByCategory))});`;

// write emoji.jsx
endResults.push(writeFile('emoji.jsx', 'utils/emoji.jsx', emojiJSX));

// golang emoji data

const emojiGo = `// Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

// This file is automatically generated via \`make emojis\`. Do not modify it manually.

package model

var SystemEmojis = map[string]string{${emojiImagesByAlias.join(', ')}}`;

const goPromise = writeFile('emoji_data.go', 'emoji_data.go', emojiGo);
endResults.push(goPromise);

// If SERVER_DIR is defined we can update the file emoji_data.go in
// the server directory
if (process.env.SERVER_DIR) {
    const destination = path.join(process.env.SERVER_DIR, 'model/emoji_data.go');
    goPromise.then(() => {
        // this is an obvious race condition, as goPromise might be the last one, and then executed out of the `all` call below,
        // but it shouldn't be any problem other than a log out of place and a need to do an explicit catch.
        const mvPromise = Fs.rename('emoji_data.go', destination);
        endResults.push(mvPromise);
        mvPromise.catch((err) => {
            console.error(`ERROR: There was an error trying to move the emoji_data.go file: ${err}`);
        });
    });
} else {
    console.warn('WARNING: $SERVER_DIR environment variable is not set, `emoji_data.go` will be located in the root of the project, remember to move it to the server');
}

// sprite css file

const cssCats = categoryNames.map((cat) => `.emoji-category-${cat} { background-image: url('/emoji-datasource/sheets-clean/sheet_apple_${EMOJI_SIZE}_clean.png'); }`);
const cssEmojis = [];
for (const key of emojiFilePositions.keys()) {
    cssEmojis.push(`.emoji-${key} { background-position: ${emojiFilePositions.get(key)} }`);
}

const cssRules = `
@charset "UTF-8";
.emojisprite-preview {
    // Using zoom for now as it results in less blurry emojis on Chrome - MM-34178
    zoom: 0.55;
    -moz-transform: scale(0.55);
    background-repeat: no-repeat;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
    padding: 0 10px 0 0;
}
.emojisprite {
    zoom: 0.35;
    -moz-transform: scale(0.35);
    background-repeat: no-repeat;
    border-radius: 18px;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
}
.emojisprite-loading {
    background-image: none !important;
    zoom: 0.35;
    -moz-transform: scale(0.35);
    background-repeat: no-repeat;
    border-radius: 18px;
    cursor: pointer;
    height: 64px;
    max-width: none;
    transform-origin: 0 0;
    width: 64px;
}

${cssCats.join('\n')};
${cssEmojis.join('\n')};
`;

// write emoji.jsx
endResults.push(writeFile('_emojisprite.scss', 'sass/components/_emojisprite.scss', cssRules));

Promise.all(endResults).then(() => {
    console.log('Remember to run `make i18n-extract` as categories might have changed.');
}).catch((err) => {
    control.abort(); // cancel any other file writing
    console.error(`ERROR: There was an error writing emojis: ${err}`);
    // eslint-disable-next-line no-process-exit
    process.exit(-1);
});

/* eslint-enable no-console */
/* eslint-enable no-process-env */
